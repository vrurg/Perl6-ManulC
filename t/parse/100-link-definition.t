use v6;
use lib q<./build-tools/lib>;
use MCTest;
use Test;
use ManulC::Parser::MD;

my Int $*md-indent-width;
my Str $*md-line-prefix;
my Regex $*md-quotable;
my Regex $*md-line-end;
my Bool %*md-line-elems;
my %*md-link-definitions;

plan 1;

subtest "Valid" => {
    my @tests =
        {
            text => q{[id1]: http://any.com
             (Title in brackets)
[id2]: https://somewhere.org},
            name => "title on the next line",
            struct => ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://any.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Title in brackets", type => "PlainStr")], type => "LinkTitle"), indent => "   ", attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id2", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://somewhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLine, indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "", type => "Eol")], type => "LinkdefParagraph"),
            rule => 'md-linkdef-paragraph',
        },
        {
            text => q{[id1]: <vrurg@cpan.org> (Author addr)},
            name => "email autolink",
            struct => ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdAutolink.new(value => ManulC::Parser::MD::MdAddrEmail.new(value => "vrurg\@cpan.org", type => "AddrEmail"), type => "Autolink"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Author addr", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "", type => "Eol")], type => "LinkdefParagraph"),
            rule => 'md-linkdef-paragraph',
        },
        {
            text => q{[id1]: <http://any.com> 'Any URL'},
            name => "URL autolink",
            struct => ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdAutolink.new(value => ManulC::Parser::MD::MdAddrUrl.new(value => "http://any.com", type => "AddrUrl"), type => "Autolink"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Any URL", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "", type => "Eol")], type => "LinkdefParagraph"),
            rule => 'md-linkdef-paragraph',
        },
        {
            text => q<[id1]: http://google.com
[id2]: http://google.com "Double-quoted title"
[id3]: http://google.com 'Single-quoted title'
[id4]: http://google.com (Bracketed title)
   [id1a]: http://google.com
   [id2a]: http://google.com "Double-quoted title"
   [id3a]: http://google.com 'Single-quoted title'
   [id4a]: http://google.com (Bracketed title)

   [ids4]: http://google.com
    (Bracketed title on a new line)
>,
                #
                #                    [idp1]: http://google.com
                #                    [idp2]: http://google.com "Double-quoted title"
                #                    [idp3]: http://google.com 'Single-quoted title'
                #                    [idp4]: http://google.com (Bracketed title)
            name => 'link definition blocks',
            struct => ManulC::Parser::MD::MdDoc.new(link-definitions => {:id1(ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLine, indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id1a(ManulC::Parser::MD::MdLinkDefinition.new(id => "id1a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLine, indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id2(ManulC::Parser::MD::MdLinkDefinition.new(id => "id2", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Double-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id2a(ManulC::Parser::MD::MdLinkDefinition.new(id => "id2a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Double-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id3(ManulC::Parser::MD::MdLinkDefinition.new(id => "id3", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Single-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id3a(ManulC::Parser::MD::MdLinkDefinition.new(id => "id3a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Single-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id4(ManulC::Parser::MD::MdLinkDefinition.new(id => "id4", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id4a(ManulC::Parser::MD::MdLinkDefinition.new(id => "id4a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :ids4(ManulC::Parser::MD::MdLinkDefinition.new(id => "ids4", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title on a new line", type => "PlainStr")], type => "LinkTitle"), indent => "   ", attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"))}, content => [ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLine, indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id2", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Double-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id3", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Single-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id4", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id1a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLine, indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id2a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Double-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id3a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Single-quoted title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdLinkDefinition.new(id => "id4a", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdBlankSpace.new(value => "\n", type => "BlankSpace")], type => "LinkdefParagraph"), ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "ids4", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "http://google.com", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Bracketed title on a new line", type => "PlainStr")], type => "LinkTitle"), indent => "   ", attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol")], type => "LinkdefParagraph")], type => "Doc"),
        },
        {
            text => q:to/TST/,
                    [id1]: https://anywhere.org "Out of BQ"

                    > A blockquote line
                    >
                    > [id2]: https://somewhere.org "First level of BQ"
                    > > [id3]: https://nowhere.org "Third level of BQ"
                    TST
            name => "definitions in a blockquote",
            subtest => -> $res {
                plan 1;
                my %ld = $res.ast.link-definitions;
                is-deeply %ld.keys.sort, <id1 id2 id3>, "all three link ids";
                done-testing;
            },
            struct => ManulC::Parser::MD::MdDoc.new(link-definitions => {:id1(ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://anywhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Out of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id2(ManulC::Parser::MD::MdLinkDefinition.new(id => "id2", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://somewhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "First level of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition")), :id3(ManulC::Parser::MD::MdLinkDefinition.new(id => "id3", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://nowhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Third level of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"))}, content => [ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id1", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://anywhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Out of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdBlankSpace.new(value => "\n", type => "BlankSpace")], type => "LinkdefParagraph"), ManulC::Parser::MD::MdBlockquote.new(content => [ManulC::Parser::MD::MdParagraph.new(content => [ManulC::Parser::MD::MdLine.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "A blockquote line", type => "PlainStr")], type => "Line"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol"), ManulC::Parser::MD::MdBlankSpace.new(value => "\n", type => "BlankSpace")], type => "Paragraph"), ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id2", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://somewhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "First level of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol")], type => "LinkdefParagraph"), ManulC::Parser::MD::MdBlockquote.new(content => [ManulC::Parser::MD::MdLinkdefParagraph.new(content => [ManulC::Parser::MD::MdLinkDefinition.new(id => "id3", addr => ManulC::Parser::MD::MdLinkAddr.new(value => ManulC::Parser::MD::MdPlainStr.new(value => "https://nowhere.org", type => "PlainStr"), type => "LinkAddr"), title => ManulC::Parser::MD::MdLinkTitle.new(content => [ManulC::Parser::MD::MdPlainStr.new(value => "Third level of BQ", type => "PlainStr")], type => "LinkTitle"), indent => Str, attrs => ManulC::Parser::MD::MdAttributes, type => "LinkDefinition"), ManulC::Parser::MD::MdEol.new(value => "\n", type => "Eol")], type => "LinkdefParagraph")], type => "Blockquote")], type => "Blockquote")], type => "Doc"),
        },
        ;

    md-test-structure( @tests );
}

done-testing;

# vim: ft=perl6
